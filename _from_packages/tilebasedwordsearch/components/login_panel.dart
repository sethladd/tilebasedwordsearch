// Auto-generated from login_panel.html.
// DO NOT EDIT.

library login_panel;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:json' as JSON;
import 'package:js/js.dart' as js;
import 'package:web_ui/web_ui.dart';
import '../tilebasedwordsearch.dart' as app;
import 'package:google_oauth2_client/google_oauth2_browser.dart';



typedef OnSignInCallback(SimpleOAuth2 authenticationContext);
typedef OnSignOutCallback();

class LoginPanel extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("login-panel");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <h2>Login Panel</h2>
        <div id="google-connect">
          <button class="g-signin" data-scope="https://www.googleapis.com/auth/games https://www.googleapis.com/auth/appstate" data-clientid="250963735330.apps.googleusercontent.com" data-callback="onSignInCallback" data-accesstype="offline" data-cookiepolicy="single_host_origin"></button>
        </div>
        <div id="auth-disconnect" style="display:none">
          <button id="disconnect">Disconnect your Google account from this app</button>
        </div>
      ''');
  autogenerated.ButtonElement __e16;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("login-panel");
    setScopedCss("login-panel", new autogenerated.ScopedCssMapper({"login-panel":"[is=\"login-panel\"]"}));
    _css = getScopedCss("login-panel");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e16 = __root.nodes[5].nodes[1];
    __t.listen(__e16.onClick, ($event) { disconnect($event); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e16 = null;
  }

  /** Original code from the component. */

  OnSignInCallback signInCallback;
  OnSignOutCallback signOutCallback;
  SimpleOAuth2 authenticationContext;

  _onSignInCallback(Map authResult) {
    print("authRequest = ${authResult}");

    if (authResult["access_token"] != null) {
      query("#google-connect").style.display = "none";
      query("#auth-disconnect").style.display = "block";

      // Enable Authenticated requested with the granted token in the client libary
      authenticationContext.token = authResult["access_token"];
      authenticationContext.tokenType = authResult["token_type"];

      // Notify
      if (signInCallback != null) {
        signInCallback(authenticationContext, authResult);
      }
    } else if (authResult["error"] != null) {
      print("There was an error: ${authResult["error"]}");
      query("#google-connect").style.display = "block";
      query("#auth-disconnect").style.display = "none";
    }
  }

  /**
   * Calls the OAuth2 endpoint to disconnect the app for the user.
   */
  void disconnect(event) {
    js.scoped(() {
      // JSONP workaround because the accounts.google.com endpoint doesn't allow CORS
      js.context.myJsonpCallback = new js.Callback.once(([jsonData]) {
        print("revoke response: $jsonData");
        query("#auth-disconnect").style.display = "none";
        query("#google-connect").style.display = "block";

        // disable authenticated requests in the client library
        authenticationContext.token = null;

        if (signOutCallback != null) {
          signOutCallback();
        }
      });

      ScriptElement script = new Element.tag("script");
      script.src = "https://accounts.google.com/o/oauth2/revoke?token=${authenticationContext.token}&callback=myJsonpCallback";
      document.body.children.add(script);
    });
  }

  void created() {
    //authenticationContext = new SimpleOAuth2(null);

    /**
     * Calls the method that handles the authentication flow.
     *
     * @param {Object} authResult An Object which contains the access token and
     *   other authentication information.
     */
    js.scoped(() {
      var reviverOAuth = new js.Callback.many((key, value) {
        if (key == "g-oauth-window") {
          return "";
        }

        return value;
      });

      js.context.onSignInCallback =  new js.Callback.many((js.Proxy authResult) {
        Map dartAuthResult =
            JSON.parse(js.context.JSON.stringify(authResult, reviverOAuth));
        _onSignInCallback(dartAuthResult);
      });
    });

    var script = new ScriptElement();
    script.async = true;
    script.type = "text/javascript";
    script.src = "https://plus.google.com/js/client:plusone.js";
    document.body.children.add(script);
  }

}
//# sourceMappingURL=login_panel.dart.map